#include "FIRFilter.h"

#define FIR_FILTER_2_LENGTH 11
#define FIR_FILTER_20_LENGTH 10
#define FIR_FILTER_50_LENGTH 10


/* Setup filter coefficients generated by http://t-filter.engineerjs.com/. Low pass filter designed for 2Hz sampling frequency */
static float FIRImpulseResponse2[FIR_FILTER_2_LENGTH] = {
  -0.012808136699528625,
  -0.033478796605522804,
  -0.01068290776099347,
  0.10853869512517651,
  0.2786474119437127,
  0.3616359026946738,
  0.2786474119437127,
  0.10853869512517651,
  -0.01068290776099347,
  -0.033478796605522804,
  -0.012808136699528625
};

/* Setup filter coefficients generated by http://t-filter.engineerjs.com/. Low pass filter designed for 20Hz sampling frequency */
static float FIRImpulseResponse20[FIR_FILTER_20_LENGTH] = {
  -0.014335812316349075,
  -0.04033323859912662,
  0.0008569194028529691,
  0.17715081982781838,
  0.37041502125297443,
  0.37041502125297443,
  0.17715081982781838,
  0.0008569194028529691,
  -0.04033323859912662,
  -0.014335812316349075
};

/* Setup filter coefficients generated by http://t-filter.engineerjs.com/. Low pass filter designed for 50Hz sampling frequency */
static float FIRImpulseResponse50[FIR_FILTER_50_LENGTH] = {
  -0.009881430542859957,
  -0.054323909697552894,
  -0.045282705199950646,
  0.15634140721815556,
  0.4200595778757181,
  0.4200595778757181,
  0.15634140721815556,
  -0.045282705199950646,
  -0.054323909697552894,
  -0.009881430542859957
};


void FIRFilter::FIRFilterInitCustom(uint8_t length, float *coefficients) {

  custom = true;

  /* Assign inputs to class variables */
  FIRImpulseResponse = coefficients;
  FIRFilterLength = length;

  /* Create buffer */
  buf = new float[FIRFilterLength];

  /* Clear filter buffer */
  for (uint8_t i = 0; i < FIRFilterLength; i++) {
    buf[i] = (float)0.0;
  }

  /* Reset buffer index */
  bufIndex = (uint8_t)0;

  /* Clear filter output */
  output = (float)0.0;
}

void FIRFilter::FIRFilterInitPremade(FIRFilterType type) {

  custom = false;

  switch (type) {

    case FIR_FILTER_LPF2:

      FIRImpulseResponse = FIRImpulseResponse2;
      FIRFilterLength = FIR_FILTER_2_LENGTH;

      break;

    case FIR_FILTER_LPF20:

      FIRImpulseResponse = FIRImpulseResponse20;
      FIRFilterLength = FIR_FILTER_20_LENGTH;

      break;

    case FIR_FILTER_LPF50:

      FIRImpulseResponse = FIRImpulseResponse50;
      FIRFilterLength = FIR_FILTER_50_LENGTH;

      break;

    default:

      FIRImpulseResponse = FIRImpulseResponse20;
      FIRFilterLength = FIR_FILTER_20_LENGTH;
  }

  /* Clear filter buffer */
  for (uint8_t i = 0; i < FIRFilterLength; i++) {
    buf[i] = (float)0.0;
  }

  /* Reset buffer index */
  bufIndex = (uint8_t)0;

  /* Clear filter output */
  output = (float)0.0;
}






float FIRFilter::FIRFilterUpdate(float input) {

  /* Input the new value into the buffer */
  buf[bufIndex] = input;

  /* Increment the buffer index */
  bufIndex++;

  /* If the buffer index is out of range, reset it */
  if (bufIndex == FIRFilterLength) {
    bufIndex = 0;
  }

  output = (float)0.0;

  uint8_t sumIndex = bufIndex;

  for (uint8_t i = 0; i < FIRFilterLength; i++) {
    if (sumIndex > 0) {
      sumIndex--;
    } else {
      sumIndex = FIRFilterLength - 1;
    }

    /* Multiply impulse response with shifted input sample and add it to output */
    output += FIRImpulseResponse[i] * buf[sumIndex];
  }

  /* Return filtered output */
  return output;
}

/* Destructor */
FIRFilter::~FIRFilter() {
  if (custom) {
    delete[] buf;
  }
}